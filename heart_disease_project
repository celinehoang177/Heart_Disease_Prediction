{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3",
      "language": "python"
    },
    "colab": {
      "provenance": []
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ifcTH5-pzo-L"
      },
      "source": [
        "# **PART 1 - Exploring the Data** #\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z-euneblzo-M"
      },
      "source": [
        "## My Research Questions ##\n",
        "1. Unsupervised Question: What are some structures of the max heart rate data that we have?\n",
        "2. Supervised Question: How is age related to the amount of cholesterol?\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bouMCPl7zo-N"
      },
      "source": [
        "Descriptions of patterns I am finding in my data set:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ve5WWvrxkoGn"
      },
      "source": [
        "Data set: https://docs.google.com/spreadsheets/d/16-oAjLolaAR4RAQcmbz63iYKdm3MhpLEcq2Gj3TMY8U/edit?usp=sharing\n",
        "\n",
        "Goal: Finding the age group most likely to have heart disease based on the following factors:\n",
        "\n",
        "age: age in years\n",
        "\n",
        "sex: (1 = male; 0 = female)\n",
        "\n",
        "cp: chest pain type (including typical angina, atypical angina, non-angina, or asymptomatic angina)\n",
        "\n",
        "trestbps: resting blood pressure (in mm Hg on admission to the hospital)\n",
        "\n",
        "chol: serum cholestoral in mg/dl\n",
        "\n",
        "fbs: Fasting blood sugar (< 120 mg/dl or > 120 mg/dl) (1 = true; 0 = false)\n",
        "\n",
        "restecg: resting electrocardiographic results (normal, ST-T wave abnormality, or left ventricular hypertrophy)\n",
        "\n",
        "thalach: Maximum heart rate achieved during thalium stress test\n",
        "\n",
        "exang: Exercise induced angina (1 = yes; 0 = no)\n",
        "\n",
        "oldpeak: ST depression induced by exercise relative to rest\n",
        "\n",
        "slope: Slope of peak exercise ST segment (0 = upsloping, 1 = flat, or 2 = downsloping)\n",
        "\n",
        "ca: number of major vessels (0-3) colored by flourosopy 4 = NA\n",
        "\n",
        "thal: Thalium stress test result 3 = normal; 6 = fixed defect; 7 = reversable defect 0 = NA\n",
        "\n",
        "target: Heart disease status 1 or 0 (0 = heart disease 1 = asymptomatic)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SoUDM_r_zo-O"
      },
      "source": [
        "# **PART 1 - Data Input** #"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WWJECTBb1rJL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "outputId": "e1eb72ce-d01a-4451-a6d8-0eafa71b6153"
      },
      "source": [
        "from google.colab import drive\n",
        "import pandas as pd\n",
        "from matplotlib import pyplot as plt\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "%matplotlib inline\n",
        "\n",
        "drive.mount(\"/drive\", force_remount=True)\n",
        "FILEROOT = \"/drive/My Drive/Colab Notebooks/\"\n",
        "\n",
        "#Prior to reading your dataset, use Google Drive to copy the csv file to the \"Colab Notebooks\" folder\n",
        "\n",
        "df = pd.read_csv(FILEROOT + 'Mini Project - Heart Disease CSV.csv')\n",
        "# Print the first few lines of the data frame to check that everything looks good\n",
        "df.head() # See the top 5 rows of the dataframe\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /drive\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>cp</th>\n",
              "      <th>trestbps</th>\n",
              "      <th>chol</th>\n",
              "      <th>fbs</th>\n",
              "      <th>restecg</th>\n",
              "      <th>thalach</th>\n",
              "      <th>exang</th>\n",
              "      <th>oldpeak</th>\n",
              "      <th>slope</th>\n",
              "      <th>ca</th>\n",
              "      <th>thal</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>63</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>145</td>\n",
              "      <td>233</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>150</td>\n",
              "      <td>0</td>\n",
              "      <td>2.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>37</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>130</td>\n",
              "      <td>250</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>187</td>\n",
              "      <td>0</td>\n",
              "      <td>3.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>41</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>130</td>\n",
              "      <td>204</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>172</td>\n",
              "      <td>0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>56</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>120</td>\n",
              "      <td>236</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>178</td>\n",
              "      <td>0</td>\n",
              "      <td>0.8</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>57</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>120</td>\n",
              "      <td>354</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>163</td>\n",
              "      <td>1</td>\n",
              "      <td>0.6</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   age  sex  cp  trestbps  chol  fbs  ...  exang  oldpeak  slope  ca  thal  target\n",
              "0   63    1   3       145   233    1  ...      0      2.3      0   0     1       1\n",
              "1   37    1   2       130   250    0  ...      0      3.5      0   0     2       1\n",
              "2   41    0   1       130   204    0  ...      0      1.4      2   0     2       1\n",
              "3   56    1   1       120   236    0  ...      0      0.8      2   0     2       1\n",
              "4   57    0   0       120   354    0  ...      1      0.6      2   0     2       1\n",
              "\n",
              "[5 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 158
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kTXDv5C7yJXi",
        "outputId": "68c59f7e-520c-4b58-b08a-14fe6ea88cb8"
      },
      "source": [
        "#Check data types\n",
        "df.dtypes"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "age           int64\n",
              "sex           int64\n",
              "cp            int64\n",
              "trestbps      int64\n",
              "chol          int64\n",
              "fbs           int64\n",
              "restecg       int64\n",
              "thalach       int64\n",
              "exang         int64\n",
              "oldpeak     float64\n",
              "slope         int64\n",
              "ca            int64\n",
              "thal          int64\n",
              "target        int64\n",
              "dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 132
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "id": "QPC9qnfKyg76",
        "outputId": "a195c446-65b2-41d2-a918-4d5b099b8d99"
      },
      "source": [
        "df.describe()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>cp</th>\n",
              "      <th>trestbps</th>\n",
              "      <th>chol</th>\n",
              "      <th>fbs</th>\n",
              "      <th>restecg</th>\n",
              "      <th>thalach</th>\n",
              "      <th>exang</th>\n",
              "      <th>oldpeak</th>\n",
              "      <th>slope</th>\n",
              "      <th>ca</th>\n",
              "      <th>thal</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>303.000000</td>\n",
              "      <td>303.000000</td>\n",
              "      <td>303.000000</td>\n",
              "      <td>303.000000</td>\n",
              "      <td>303.000000</td>\n",
              "      <td>303.000000</td>\n",
              "      <td>303.000000</td>\n",
              "      <td>303.000000</td>\n",
              "      <td>303.000000</td>\n",
              "      <td>303.000000</td>\n",
              "      <td>303.000000</td>\n",
              "      <td>303.000000</td>\n",
              "      <td>303.000000</td>\n",
              "      <td>303.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>54.366337</td>\n",
              "      <td>0.683168</td>\n",
              "      <td>0.966997</td>\n",
              "      <td>131.623762</td>\n",
              "      <td>246.264026</td>\n",
              "      <td>0.148515</td>\n",
              "      <td>0.528053</td>\n",
              "      <td>149.646865</td>\n",
              "      <td>0.326733</td>\n",
              "      <td>1.039604</td>\n",
              "      <td>1.399340</td>\n",
              "      <td>0.729373</td>\n",
              "      <td>2.313531</td>\n",
              "      <td>0.544554</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>9.082101</td>\n",
              "      <td>0.466011</td>\n",
              "      <td>1.032052</td>\n",
              "      <td>17.538143</td>\n",
              "      <td>51.830751</td>\n",
              "      <td>0.356198</td>\n",
              "      <td>0.525860</td>\n",
              "      <td>22.905161</td>\n",
              "      <td>0.469794</td>\n",
              "      <td>1.161075</td>\n",
              "      <td>0.616226</td>\n",
              "      <td>1.022606</td>\n",
              "      <td>0.612277</td>\n",
              "      <td>0.498835</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>29.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>94.000000</td>\n",
              "      <td>126.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>71.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>47.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>211.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>133.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>55.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>130.000000</td>\n",
              "      <td>240.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>153.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>61.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>140.000000</td>\n",
              "      <td>274.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>166.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.600000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>77.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>564.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>202.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>6.200000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "              age         sex          cp  ...          ca        thal      target\n",
              "count  303.000000  303.000000  303.000000  ...  303.000000  303.000000  303.000000\n",
              "mean    54.366337    0.683168    0.966997  ...    0.729373    2.313531    0.544554\n",
              "std      9.082101    0.466011    1.032052  ...    1.022606    0.612277    0.498835\n",
              "min     29.000000    0.000000    0.000000  ...    0.000000    0.000000    0.000000\n",
              "25%     47.500000    0.000000    0.000000  ...    0.000000    2.000000    0.000000\n",
              "50%     55.000000    1.000000    1.000000  ...    0.000000    2.000000    1.000000\n",
              "75%     61.000000    1.000000    2.000000  ...    1.000000    3.000000    1.000000\n",
              "max     77.000000    1.000000    3.000000  ...    4.000000    3.000000    1.000000\n",
              "\n",
              "[8 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 133
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "1PQEmRKVytEF",
        "outputId": "4b0d6901-47b8-4547-e49b-0bb8e3df5fca"
      },
      "source": [
        "df.groupby(['age']).mean()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sex</th>\n",
              "      <th>cp</th>\n",
              "      <th>trestbps</th>\n",
              "      <th>chol</th>\n",
              "      <th>fbs</th>\n",
              "      <th>restecg</th>\n",
              "      <th>thalach</th>\n",
              "      <th>exang</th>\n",
              "      <th>oldpeak</th>\n",
              "      <th>slope</th>\n",
              "      <th>ca</th>\n",
              "      <th>thal</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>130.000000</td>\n",
              "      <td>204.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>202.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>0.500000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>118.000000</td>\n",
              "      <td>196.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>183.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.350000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>0.750000</td>\n",
              "      <td>0.250000</td>\n",
              "      <td>126.500000</td>\n",
              "      <td>213.750000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>160.500000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>1.750000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.500000</td>\n",
              "      <td>0.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>0.500000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>125.000000</td>\n",
              "      <td>232.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>178.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.750000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.333333</td>\n",
              "      <td>132.000000</td>\n",
              "      <td>193.666667</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>176.000000</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>1.266667</td>\n",
              "      <td>1.666667</td>\n",
              "      <td>2.666667</td>\n",
              "      <td>2.333333</td>\n",
              "      <td>0.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>0.500000</td>\n",
              "      <td>1.500000</td>\n",
              "      <td>122.500000</td>\n",
              "      <td>239.750000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>163.250000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.300000</td>\n",
              "      <td>1.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.250000</td>\n",
              "      <td>0.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>134.000000</td>\n",
              "      <td>196.333333</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>157.666667</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>1.133333</td>\n",
              "      <td>1.666667</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>0.600000</td>\n",
              "      <td>1.200000</td>\n",
              "      <td>119.000000</td>\n",
              "      <td>220.700000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>164.700000</td>\n",
              "      <td>0.100000</td>\n",
              "      <td>0.340000</td>\n",
              "      <td>1.800000</td>\n",
              "      <td>0.100000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.900000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>0.750000</td>\n",
              "      <td>1.250000</td>\n",
              "      <td>127.000000</td>\n",
              "      <td>246.750000</td>\n",
              "      <td>0.125000</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>160.250000</td>\n",
              "      <td>0.125000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>1.375000</td>\n",
              "      <td>0.250000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.875000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>0.750000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>126.375000</td>\n",
              "      <td>256.750000</td>\n",
              "      <td>0.250000</td>\n",
              "      <td>0.625000</td>\n",
              "      <td>154.875000</td>\n",
              "      <td>0.375000</td>\n",
              "      <td>1.300000</td>\n",
              "      <td>1.375000</td>\n",
              "      <td>0.625000</td>\n",
              "      <td>2.500000</td>\n",
              "      <td>0.625000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>0.818182</td>\n",
              "      <td>1.181818</td>\n",
              "      <td>120.727273</td>\n",
              "      <td>221.363636</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.636364</td>\n",
              "      <td>168.818182</td>\n",
              "      <td>0.181818</td>\n",
              "      <td>0.372727</td>\n",
              "      <td>1.636364</td>\n",
              "      <td>0.272727</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.727273</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>0.625000</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>122.375000</td>\n",
              "      <td>247.375000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.250000</td>\n",
              "      <td>155.875000</td>\n",
              "      <td>0.375000</td>\n",
              "      <td>0.625000</td>\n",
              "      <td>1.250000</td>\n",
              "      <td>0.375000</td>\n",
              "      <td>2.250000</td>\n",
              "      <td>0.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>0.571429</td>\n",
              "      <td>0.857143</td>\n",
              "      <td>128.000000</td>\n",
              "      <td>230.285714</td>\n",
              "      <td>0.142857</td>\n",
              "      <td>0.571429</td>\n",
              "      <td>150.142857</td>\n",
              "      <td>0.428571</td>\n",
              "      <td>1.085714</td>\n",
              "      <td>1.285714</td>\n",
              "      <td>0.285714</td>\n",
              "      <td>2.428571</td>\n",
              "      <td>0.571429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.200000</td>\n",
              "      <td>119.600000</td>\n",
              "      <td>246.400000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>149.600000</td>\n",
              "      <td>0.200000</td>\n",
              "      <td>0.220000</td>\n",
              "      <td>1.800000</td>\n",
              "      <td>0.200000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>0.857143</td>\n",
              "      <td>0.857143</td>\n",
              "      <td>124.285714</td>\n",
              "      <td>250.857143</td>\n",
              "      <td>0.285714</td>\n",
              "      <td>0.428571</td>\n",
              "      <td>166.285714</td>\n",
              "      <td>0.142857</td>\n",
              "      <td>0.271429</td>\n",
              "      <td>1.428571</td>\n",
              "      <td>0.571429</td>\n",
              "      <td>2.428571</td>\n",
              "      <td>0.571429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>0.600000</td>\n",
              "      <td>1.200000</td>\n",
              "      <td>126.400000</td>\n",
              "      <td>228.600000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.800000</td>\n",
              "      <td>152.200000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.680000</td>\n",
              "      <td>1.600000</td>\n",
              "      <td>1.200000</td>\n",
              "      <td>2.200000</td>\n",
              "      <td>0.600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>0.571429</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>130.428571</td>\n",
              "      <td>227.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.571429</td>\n",
              "      <td>151.285714</td>\n",
              "      <td>0.142857</td>\n",
              "      <td>0.971429</td>\n",
              "      <td>1.428571</td>\n",
              "      <td>0.142857</td>\n",
              "      <td>2.428571</td>\n",
              "      <td>0.571429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>0.666667</td>\n",
              "      <td>1.416667</td>\n",
              "      <td>124.500000</td>\n",
              "      <td>258.666667</td>\n",
              "      <td>0.083333</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>148.500000</td>\n",
              "      <td>0.583333</td>\n",
              "      <td>1.266667</td>\n",
              "      <td>1.666667</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>2.333333</td>\n",
              "      <td>0.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>0.923077</td>\n",
              "      <td>1.153846</td>\n",
              "      <td>130.692308</td>\n",
              "      <td>228.230769</td>\n",
              "      <td>0.384615</td>\n",
              "      <td>0.846154</td>\n",
              "      <td>167.230769</td>\n",
              "      <td>0.153846</td>\n",
              "      <td>0.376923</td>\n",
              "      <td>1.692308</td>\n",
              "      <td>0.923077</td>\n",
              "      <td>2.153846</td>\n",
              "      <td>0.692308</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>0.625000</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>132.625000</td>\n",
              "      <td>233.500000</td>\n",
              "      <td>0.375000</td>\n",
              "      <td>0.125000</td>\n",
              "      <td>138.000000</td>\n",
              "      <td>0.375000</td>\n",
              "      <td>0.837500</td>\n",
              "      <td>1.250000</td>\n",
              "      <td>0.625000</td>\n",
              "      <td>2.125000</td>\n",
              "      <td>0.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>0.687500</td>\n",
              "      <td>1.062500</td>\n",
              "      <td>129.125000</td>\n",
              "      <td>253.312500</td>\n",
              "      <td>0.125000</td>\n",
              "      <td>0.437500</td>\n",
              "      <td>147.750000</td>\n",
              "      <td>0.312500</td>\n",
              "      <td>0.931250</td>\n",
              "      <td>1.437500</td>\n",
              "      <td>0.625000</td>\n",
              "      <td>2.437500</td>\n",
              "      <td>0.625000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.375000</td>\n",
              "      <td>142.125000</td>\n",
              "      <td>280.625000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>139.625000</td>\n",
              "      <td>0.625000</td>\n",
              "      <td>1.950000</td>\n",
              "      <td>1.125000</td>\n",
              "      <td>0.375000</td>\n",
              "      <td>2.500000</td>\n",
              "      <td>0.375000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>0.727273</td>\n",
              "      <td>0.818182</td>\n",
              "      <td>134.636364</td>\n",
              "      <td>259.363636</td>\n",
              "      <td>0.363636</td>\n",
              "      <td>0.181818</td>\n",
              "      <td>145.636364</td>\n",
              "      <td>0.545455</td>\n",
              "      <td>1.400000</td>\n",
              "      <td>0.909091</td>\n",
              "      <td>0.636364</td>\n",
              "      <td>2.272727</td>\n",
              "      <td>0.454545</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>0.764706</td>\n",
              "      <td>0.529412</td>\n",
              "      <td>136.058824</td>\n",
              "      <td>238.529412</td>\n",
              "      <td>0.117647</td>\n",
              "      <td>0.647059</td>\n",
              "      <td>143.823529</td>\n",
              "      <td>0.470588</td>\n",
              "      <td>0.717647</td>\n",
              "      <td>1.411765</td>\n",
              "      <td>0.705882</td>\n",
              "      <td>2.352941</td>\n",
              "      <td>0.411765</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>0.684211</td>\n",
              "      <td>0.842105</td>\n",
              "      <td>127.947368</td>\n",
              "      <td>254.526316</td>\n",
              "      <td>0.210526</td>\n",
              "      <td>0.368421</td>\n",
              "      <td>146.842105</td>\n",
              "      <td>0.263158</td>\n",
              "      <td>1.389474</td>\n",
              "      <td>1.368421</td>\n",
              "      <td>1.210526</td>\n",
              "      <td>2.421053</td>\n",
              "      <td>0.368421</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>0.928571</td>\n",
              "      <td>1.214286</td>\n",
              "      <td>149.214286</td>\n",
              "      <td>239.857143</td>\n",
              "      <td>0.214286</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>147.571429</td>\n",
              "      <td>0.357143</td>\n",
              "      <td>1.078571</td>\n",
              "      <td>1.285714</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>2.285714</td>\n",
              "      <td>0.357143</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>0.636364</td>\n",
              "      <td>0.818182</td>\n",
              "      <td>131.727273</td>\n",
              "      <td>245.545455</td>\n",
              "      <td>0.181818</td>\n",
              "      <td>0.454545</td>\n",
              "      <td>148.000000</td>\n",
              "      <td>0.454545</td>\n",
              "      <td>1.681818</td>\n",
              "      <td>1.454545</td>\n",
              "      <td>1.181818</td>\n",
              "      <td>2.636364</td>\n",
              "      <td>0.272727</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>0.750000</td>\n",
              "      <td>0.625000</td>\n",
              "      <td>138.125000</td>\n",
              "      <td>243.750000</td>\n",
              "      <td>0.125000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>145.125000</td>\n",
              "      <td>0.625000</td>\n",
              "      <td>1.712500</td>\n",
              "      <td>1.375000</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>2.500000</td>\n",
              "      <td>0.125000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>0.363636</td>\n",
              "      <td>0.545455</td>\n",
              "      <td>134.545455</td>\n",
              "      <td>256.636364</td>\n",
              "      <td>0.181818</td>\n",
              "      <td>0.545455</td>\n",
              "      <td>133.636364</td>\n",
              "      <td>0.181818</td>\n",
              "      <td>1.863636</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.363636</td>\n",
              "      <td>2.454545</td>\n",
              "      <td>0.363636</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>0.444444</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>133.555556</td>\n",
              "      <td>258.222222</td>\n",
              "      <td>0.222222</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>153.666667</td>\n",
              "      <td>0.444444</td>\n",
              "      <td>1.700000</td>\n",
              "      <td>1.333333</td>\n",
              "      <td>1.444444</td>\n",
              "      <td>2.333333</td>\n",
              "      <td>0.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64</th>\n",
              "      <td>0.700000</td>\n",
              "      <td>1.200000</td>\n",
              "      <td>138.800000</td>\n",
              "      <td>274.400000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>133.000000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>1.080000</td>\n",
              "      <td>1.200000</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>2.300000</td>\n",
              "      <td>0.600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65</th>\n",
              "      <td>0.500000</td>\n",
              "      <td>1.125000</td>\n",
              "      <td>138.500000</td>\n",
              "      <td>279.000000</td>\n",
              "      <td>0.250000</td>\n",
              "      <td>0.250000</td>\n",
              "      <td>146.125000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.075000</td>\n",
              "      <td>1.625000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.250000</td>\n",
              "      <td>0.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>66</th>\n",
              "      <td>0.571429</td>\n",
              "      <td>0.857143</td>\n",
              "      <td>146.571429</td>\n",
              "      <td>245.714286</td>\n",
              "      <td>0.142857</td>\n",
              "      <td>0.428571</td>\n",
              "      <td>138.857143</td>\n",
              "      <td>0.428571</td>\n",
              "      <td>0.914286</td>\n",
              "      <td>1.142857</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.857143</td>\n",
              "      <td>0.571429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67</th>\n",
              "      <td>0.666667</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>127.777778</td>\n",
              "      <td>286.777778</td>\n",
              "      <td>0.111111</td>\n",
              "      <td>0.444444</td>\n",
              "      <td>135.555556</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>0.988889</td>\n",
              "      <td>1.222222</td>\n",
              "      <td>1.333333</td>\n",
              "      <td>2.444444</td>\n",
              "      <td>0.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>68</th>\n",
              "      <td>0.750000</td>\n",
              "      <td>1.500000</td>\n",
              "      <td>140.500000</td>\n",
              "      <td>238.750000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>139.250000</td>\n",
              "      <td>0.250000</td>\n",
              "      <td>1.875000</td>\n",
              "      <td>1.250000</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>2.750000</td>\n",
              "      <td>0.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69</th>\n",
              "      <td>0.666667</td>\n",
              "      <td>2.666667</td>\n",
              "      <td>146.666667</td>\n",
              "      <td>242.333333</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>142.666667</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.300000</td>\n",
              "      <td>1.333333</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.333333</td>\n",
              "      <td>0.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>70</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>147.750000</td>\n",
              "      <td>252.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>122.250000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>1.975000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.500000</td>\n",
              "      <td>0.250000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>127.333333</td>\n",
              "      <td>238.666667</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>139.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>1.666667</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>74</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>269.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>121.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.200000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>140.000000</td>\n",
              "      <td>197.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>116.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.100000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>77</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>125.000000</td>\n",
              "      <td>304.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>162.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          sex        cp    trestbps  ...        ca      thal    target\n",
              "age                                  ...                              \n",
              "29   1.000000  1.000000  130.000000  ...  0.000000  2.000000  1.000000\n",
              "34   0.500000  2.000000  118.000000  ...  0.000000  2.000000  1.000000\n",
              "35   0.750000  0.250000  126.500000  ...  0.000000  2.500000  0.500000\n",
              "37   0.500000  2.000000  125.000000  ...  0.000000  2.000000  1.000000\n",
              "38   1.000000  2.333333  132.000000  ...  2.666667  2.333333  0.666667\n",
              "39   0.500000  1.500000  122.500000  ...  0.000000  2.250000  0.750000\n",
              "40   1.000000  1.000000  134.000000  ...  0.000000  3.000000  0.333333\n",
              "41   0.600000  1.200000  119.000000  ...  0.100000  2.000000  0.900000\n",
              "42   0.750000  1.250000  127.000000  ...  0.250000  2.000000  0.875000\n",
              "43   0.750000  0.500000  126.375000  ...  0.625000  2.500000  0.625000\n",
              "44   0.818182  1.181818  120.727273  ...  0.272727  2.000000  0.727273\n",
              "45   0.625000  0.750000  122.375000  ...  0.375000  2.250000  0.750000\n",
              "46   0.571429  0.857143  128.000000  ...  0.285714  2.428571  0.571429\n",
              "47   1.000000  1.200000  119.600000  ...  0.200000  2.000000  0.600000\n",
              "48   0.857143  0.857143  124.285714  ...  0.571429  2.428571  0.571429\n",
              "49   0.600000  1.200000  126.400000  ...  1.200000  2.200000  0.600000\n",
              "50   0.571429  1.000000  130.428571  ...  0.142857  2.428571  0.571429\n",
              "51   0.666667  1.416667  124.500000  ...  0.500000  2.333333  0.750000\n",
              "52   0.923077  1.153846  130.692308  ...  0.923077  2.153846  0.692308\n",
              "53   0.625000  0.750000  132.625000  ...  0.625000  2.125000  0.750000\n",
              "54   0.687500  1.062500  129.125000  ...  0.625000  2.437500  0.625000\n",
              "55   0.500000  0.375000  142.125000  ...  0.375000  2.500000  0.375000\n",
              "56   0.727273  0.818182  134.636364  ...  0.636364  2.272727  0.454545\n",
              "57   0.764706  0.529412  136.058824  ...  0.705882  2.352941  0.411765\n",
              "58   0.684211  0.842105  127.947368  ...  1.210526  2.421053  0.368421\n",
              "59   0.928571  1.214286  149.214286  ...  0.500000  2.285714  0.357143\n",
              "60   0.636364  0.818182  131.727273  ...  1.181818  2.636364  0.272727\n",
              "61   0.750000  0.625000  138.125000  ...  0.750000  2.500000  0.125000\n",
              "62   0.363636  0.545455  134.545455  ...  1.363636  2.454545  0.363636\n",
              "63   0.444444  0.666667  133.555556  ...  1.444444  2.333333  0.333333\n",
              "64   0.700000  1.200000  138.800000  ...  0.600000  2.300000  0.600000\n",
              "65   0.500000  1.125000  138.500000  ...  1.000000  2.250000  0.500000\n",
              "66   0.571429  0.857143  146.571429  ...  1.000000  1.857143  0.571429\n",
              "67   0.666667  0.666667  127.777778  ...  1.333333  2.444444  0.333333\n",
              "68   0.750000  1.500000  140.500000  ...  0.750000  2.750000  0.500000\n",
              "69   0.666667  2.666667  146.666667  ...  2.000000  2.333333  0.666667\n",
              "70   1.000000  0.750000  147.750000  ...  1.000000  2.500000  0.250000\n",
              "71   0.000000  1.000000  127.333333  ...  1.000000  2.000000  1.000000\n",
              "74   0.000000  1.000000  120.000000  ...  1.000000  2.000000  1.000000\n",
              "76   0.000000  2.000000  140.000000  ...  0.000000  2.000000  1.000000\n",
              "77   1.000000  0.000000  125.000000  ...  3.000000  2.000000  0.000000\n",
              "\n",
              "[41 rows x 13 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 134
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 729
        },
        "id": "4wnV7SSq0b-L",
        "outputId": "342cda90-ea99-4f64-dbd5-37e4e5385a22"
      },
      "source": [
        "tmp_df = df.copy()\n",
        "list = ['age', 'trestbps','chol','thalach','oldpeak']\n",
        "for x in df:\n",
        "  if not x in list:\n",
        "    del tmp_df[x]\n",
        "tmp_df.hist(figsize=(20, 10), bins=15)\n",
        "plt.tight_layout()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 1440x720 with 6 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g5dAtPD8zwlb"
      },
      "source": [
        "# **PART 2 - Data Visualization** #"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pgLUW4SCAdUm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 205
        },
        "outputId": "03ca9e95-0dd8-467c-f7a6-ac687fac0017"
      },
      "source": [
        "df['age_normalized'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())\n",
        "\n",
        "df['chol_normalized'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())\n",
        "# Check work by printing normalized values and original values\n",
        "df[['chol','chol_normalized']].head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>chol</th>\n",
              "      <th>chol_normalized</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>233</td>\n",
              "      <td>0.244292</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>250</td>\n",
              "      <td>0.283105</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>204</td>\n",
              "      <td>0.178082</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>236</td>\n",
              "      <td>0.251142</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>354</td>\n",
              "      <td>0.520548</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   chol  chol_normalized\n",
              "0   233         0.244292\n",
              "1   250         0.283105\n",
              "2   204         0.178082\n",
              "3   236         0.251142\n",
              "4   354         0.520548"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 136
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y1Id7S2tzo-O",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 205
        },
        "outputId": "ec499b12-8ac7-482d-b152-96f169b3cf2f"
      },
      "source": [
        "def age_size(row):\n",
        "    if row[\"age\"] <= 42:\n",
        "        return \"1\"\n",
        "    elif row[\"age\"] <= 60:\n",
        "        return \"2\"\n",
        "    else: #We assume all other values are in the middle, so we assign medium to them\n",
        "        return \"3\"\n",
        "\n",
        "df['age_size'] = df.apply(age_size,axis=1)\n",
        "df[['age','age_size']].head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>age_size</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>63</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>37</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>41</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>56</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>57</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   age age_size\n",
              "0   63        3\n",
              "1   37        1\n",
              "2   41        1\n",
              "3   56        2\n",
              "4   57        2"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 137
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0eqC_k0wzo-O",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "outputId": "ed60a1bd-c861-41f8-84d7-e91953c4e56f"
      },
      "source": [
        "sns.countplot(x='cp', hue='target',data=df,\n",
        "             palette='icefire').set_title('Heart disease count by chest pain type')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Heart disease count by chest pain type')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 138
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PMJOGfRXzo-P",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "outputId": "8132f8d7-6dad-4151-85a9-70c094e76035"
      },
      "source": [
        "sns.lineplot(data=df, x=\"sex\", y=\"trestbps\").set_title('Resting blood pressure vs. Sex')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Resting blood pressure vs. Sex')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 167
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "UzlIcwBuHE2f",
        "outputId": "2934482b-5186-4486-b794-a31930445648"
      },
      "source": [
        "sns.scatterplot(x='age', y='thalach', hue='sex', data=df).set_title('Age vs. max heart rate achieved')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Age vs. max heart rate achieved')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 140
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YLEOfjYfzo-P"
      },
      "source": [
        "# **PART 3 - Feature Engineering** #"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wPsEsZirzo-P",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bedd035d-a396-4c29-938d-59ae93324580"
      },
      "source": [
        "# factor is the number of standard deviations being used.\n",
        "factor = 4\n",
        "\n",
        "upper_lim = df['chol'].mean () + df['chol'].std () * factor\n",
        "lower_lim = df['chol'].mean () - df['chol'].std () * factor\n",
        "df = df[(df['chol'] < upper_lim) & (df['chol'] > lower_lim)]\n",
        "\n",
        "# Print new descriptive statistics to see if we dropped from the edges\n",
        "df['chol'].describe()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    302.000000\n",
              "mean     245.211921\n",
              "std       48.567877\n",
              "min      126.000000\n",
              "25%      211.000000\n",
              "50%      240.000000\n",
              "75%      274.000000\n",
              "max      417.000000\n",
              "Name: chol, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 141
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UpiT_k7Gzo-P",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 205
        },
        "outputId": "03dee4f3-6379-4ced-e6ca-4cf636c2e6ea"
      },
      "source": [
        "df['trestbps_normalized'] = (df['trestbps'] - df['trestbps'].min()) / (df['trestbps'].max() - df['trestbps'].min())\n",
        "\n",
        "# Standardization calculation - also known as z-score normalization\n",
        "df['trestbps_stand'] = (df['trestbps'] - df['trestbps'].mean()) / df['trestbps'].std()\n",
        "# Check work by printing normalized values and original values\n",
        "df[['trestbps_stand','trestbps']].head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>trestbps_stand</th>\n",
              "      <th>trestbps</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.759431</td>\n",
              "      <td>145</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.095708</td>\n",
              "      <td>130</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.095708</td>\n",
              "      <td>130</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.665800</td>\n",
              "      <td>120</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.665800</td>\n",
              "      <td>120</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   trestbps_stand  trestbps\n",
              "0        0.759431       145\n",
              "1       -0.095708       130\n",
              "2       -0.095708       130\n",
              "3       -0.665800       120\n",
              "4       -0.665800       120"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 142
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3zgIWKU-zo-P",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2a2ea3d0-c641-444b-9a16-ef5190eafdb3"
      },
      "source": [
        "df['thal_log'] = (df['thal']+1).transform(np.log)\n",
        "df['thal_log'].describe()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    302.000000\n",
              "mean       1.177670\n",
              "std        0.208506\n",
              "min        0.000000\n",
              "25%        1.098612\n",
              "50%        1.098612\n",
              "75%        1.386294\n",
              "max        1.386294\n",
              "Name: thal_log, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 143
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "-y6zMmM6cYBu",
        "outputId": "c1cc4489-01ff-41cf-e6d9-718897af3387"
      },
      "source": [
        "plt.hist(df['thal_log'], bins=20)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([  2.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  18.,\n",
              "          0.,   0.,   0.,   0., 166.,   0.,   0.,   0., 116.]),\n",
              " array([0.        , 0.06931472, 0.13862944, 0.20794415, 0.27725887,\n",
              "        0.34657359, 0.41588831, 0.48520303, 0.55451774, 0.62383246,\n",
              "        0.69314718, 0.7624619 , 0.83177662, 0.90109133, 0.97040605,\n",
              "        1.03972077, 1.10903549, 1.17835021, 1.24766493, 1.31697964,\n",
              "        1.38629436]),\n",
              " <a list of 20 Patch objects>)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 144
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jp9Ffq0cclxM",
        "outputId": "a50e210e-e587-4862-8cb4-31248d6dd202"
      },
      "source": [
        "df.groupby('restecg')['age'].count()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "restecg\n",
              "0    146\n",
              "1    152\n",
              "2      4\n",
              "Name: age, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 145
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 205
        },
        "id": "qdLKbgjR0tDL",
        "outputId": "49fa78a2-92d7-4100-909b-0026becc4279"
      },
      "source": [
        "def heart_rate_classify (row):\n",
        "    if row['thalach'] <= 160:\n",
        "        return \"1\"\n",
        "    elif row['thalach'] <= 170:\n",
        "        return \"2\"\n",
        "    else:\n",
        "        return \"3\"\n",
        "df['thalach_group'] = df.apply(heart_rate_classify,axis=1)\n",
        "\n",
        "df[['thalach','thalach_group']].head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>thalach</th>\n",
              "      <th>thalach_group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>150</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>187</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>172</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>178</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>163</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   thalach thalach_group\n",
              "0      150             1\n",
              "1      187             3\n",
              "2      172             3\n",
              "3      178             3\n",
              "4      163             2"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 146
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fFsEz4Fyzo-Q"
      },
      "source": [
        "# **PART 4 - Clustering** #"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nolUR3mI9_HS"
      },
      "source": [
        "from sklearn.cluster import KMeans\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# n_clusters specifies what value of k to use (how many clusters)\n",
        "n_clusters = 3\n",
        "\n",
        "# Create our KMeans classifier\n",
        "kMeans_classifier = KMeans(n_clusters=n_clusters)\n",
        "\n",
        "# Normalized thalach to use in clustering\n",
        "df['thalach_normalized'] = (df['thalach'] - df['thalach'].min()) / (df['thalach'].max() - df['thalach'].min())\n",
        "\n",
        "X_digits = df['thalach_normalized'].values.reshape(-1,1)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pYGJM-YF-ESd"
      },
      "source": [
        "y_pred = kMeans_classifier.fit_predict(X_digits)\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3Ux-BV2b-H5y"
      },
      "source": [
        "import plotly.express as px\n",
        "\n",
        "def visualize_clusters(x_axis, y_axis, count):\n",
        "    fig = px.scatter(x=x_axis, y=y_axis,size=count)\n",
        "    fig.update_layout(\n",
        "    xaxis=dict(title=\"Max Heart Rate Group\", tickmode=\"linear\"),\n",
        "    yaxis=dict(title=\"Cluster index\", tickmode=\"linear\")\n",
        "    )\n",
        "    fig.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1AcXJkelSnSd"
      },
      "source": [
        "import numpy as np\n",
        "y_hrGroups = np.array(df.loc[:, 'thalach_group'].values).astype('int') -1"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LVCdXrzGqpS3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 560
        },
        "outputId": "8f7c80ec-3b1b-4a8b-9161-41195ecc1698"
      },
      "source": [
        "l  = []\n",
        "for i in range(0, len(X_digits)):\n",
        "    l.append([y_hrGroups[i], y_pred[i]])\n",
        "l.sort()\n",
        "\n",
        "\n",
        "n_hrGroup = 3\n",
        "x = []\n",
        "y = []\n",
        "count = []\n",
        "\n",
        "for i in range(0, n_hrGroup):\n",
        "    for j in range(0, n_clusters):\n",
        "        c = 0\n",
        "        for k in range(0, len(l)):\n",
        "            c = c + (l[k][0] == i and l[k][1] == j)\n",
        "        x.append(i)\n",
        "        y.append(j)\n",
        "        count.append(c)\n",
        "\n",
        "print(count)\n",
        "visualize_clusters(x, y, count)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[115, 18, 59, 0, 52, 0, 0, 58, 0]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>\n",
              "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>\n",
              "                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>    \n",
              "            <div id=\"c587d7e1-8848-471f-9cae-899a8f7683af\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>\n",
              "            <script type=\"text/javascript\">\n",
              "                \n",
              "                    window.PLOTLYENV=window.PLOTLYENV || {};\n",
              "                    \n",
              "                if (document.getElementById(\"c587d7e1-8848-471f-9cae-899a8f7683af\")) {\n",
              "                    Plotly.newPlot(\n",
              "                        'c587d7e1-8848-471f-9cae-899a8f7683af',\n",
              "                        [{\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"x=%{x}<br>y=%{y}<br>size=%{marker.size}\", \"legendgroup\": \"\", \"marker\": {\"color\": \"#636efa\", \"size\": [115, 18, 59, 0, 52, 0, 0, 58, 0], \"sizemode\": \"area\", \"sizeref\": 0.2875, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"\", \"showlegend\": false, \"type\": \"scatter\", \"x\": [0, 0, 0, 1, 1, 1, 2, 2, 2], \"xaxis\": \"x\", \"y\": [0, 1, 2, 0, 1, 2, 0, 1, 2], \"yaxis\": \"y\"}],\n",
              "                        {\"legend\": {\"itemsizing\": \"constant\", \"tracegroupgap\": 0}, \"margin\": {\"t\": 60}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"xaxis\": {\"anchor\": \"y\", \"domain\": [0.0, 1.0], \"tickmode\": \"linear\", \"title\": {\"text\": \"Max Heart Rate Group\"}}, \"yaxis\": {\"anchor\": \"x\", \"domain\": [0.0, 1.0], \"tickmode\": \"linear\", \"title\": {\"text\": \"Cluster index\"}}},\n",
              "                        {\"responsive\": true}\n",
              "                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('c587d7e1-8848-471f-9cae-899a8f7683af');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })\n",
              "                };\n",
              "                \n",
              "            </script>\n",
              "        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sDbNyo0Kzo-Q"
      },
      "source": [
        "# **PART 5 - Supervised Learning** #"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M9FDbum_zo-R"
      },
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "lin_regress = LinearRegression()\n",
        "\n",
        "# Define the inputs/features for the models I'll test below\n",
        "# I'll use the ages from the samples\n",
        "X = df[\"age\"].values.reshape(-1,1)  #note this is necessary if only one feature\n",
        "\n",
        "# Here I'll try to predict the amount of cholesterol in blood\n",
        "y = df[\"chol\"]\n",
        "lin_regress.fit(X,y)                   # Create a regression model\n",
        "lin_predict = lin_regress.predict(X)   # Predict values based on regression model\n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uJW5CxZebC_H",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "609795b6-c666-458b-91b1-e465890f5dca"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.xlabel('Age')\n",
        "plt.ylabel('serum cholesterol in mg/dl')\n",
        "plt.scatter(X, y, color='black')   # plot the actual data as black circles\n",
        "plt.plot(X, lin_predict, 'cs')     # plot the expected results from the regression as cyan\n",
        "plt.show()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xElUx0hWzo-R",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "af60b5c3-fb6b-4e75-d683-eb6ba3615145"
      },
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "\n",
        "# Predict if the people have heart diseases or not base on their max heart rates achieved\n",
        "x = df[['chol_normalized','age_normalized','thalach_normalized','trestbps_normalized','sex', 'fbs',\t'restecg', 'exang',\t'oldpeak',\t'slope',\t'ca',\t'thal','cp']]\n",
        "y_logreg = df['target']\n",
        "\n",
        "# Also reset our training and testing sets, since we have a new outcome\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y_logreg, test_size=0.20)\n",
        "\n",
        "# Create a Logistic Regression Classifier\n",
        "logreg = LogisticRegression()\n",
        "\n",
        "# Use the training set to fit the data\n",
        "logreg.fit(x_train, y_train.values.ravel())\n",
        "\n",
        "# Get the predictions\n",
        "y_pred_logreg = logreg.predict(x_test)\n",
        "\n",
        "# Print the accuracy metric\n",
        "# Accuracy is the correct predictions divided by the total predictions\n",
        "accuracy = metrics.accuracy_score(y_test, y_pred_logreg)\n",
        "accuracy_percentage = 100 * accuracy\n",
        "print('Accuracy: ',accuracy_percentage)\n",
        "\n",
        "print('Mean squared error: %.2f'\n",
        "      % mean_squared_error(y_test, y_pred_logreg))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy:  80.32786885245902\n",
            "Mean squared error: 0.20\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i1CM4UCCZ1pk",
        "outputId": "d69c11f8-dacd-4491-fdd1-4c1fb594c7e0"
      },
      "source": [
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "# Set our machine learning algorithm type - Naive Bayes, Gaussian\n",
        "NB = GaussianNB()\n",
        "\n",
        "# Predict if the people have heart diseases or not base on their cholesterol in blood\n",
        "x = df[['chol_normalized','age_normalized','thalach_normalized','trestbps_normalized','sex', 'fbs',\t'restecg', 'exang',\t'oldpeak',\t'slope',\t'ca',\t'thal','cp']]\n",
        "y = df['target']\n",
        "\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20)\n",
        "\n",
        "# Fit the model with our training data\n",
        "NB.fit(x_train,y_train.values.ravel())\n",
        "\n",
        "# Use the model to make predictions using our testing input data\n",
        "y_pred_NB = NB.predict(x_test)\n",
        "\n",
        "# Calculate the accuracy of the model as a percent\n",
        "accuracy = metrics.accuracy_score(y_test, y_pred_NB)\n",
        "accuracy_percentage = 100 * accuracy\n",
        "print('Accuracy: ',accuracy_percentage)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy:  78.68852459016394\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}
